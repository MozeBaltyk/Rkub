---
name: Stage deployment

on:
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./test

    steps:
      - name: Checkout files
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Get key
        run: |
          echo "$SSH_KEY" > .key
          chmod 400 .key
        shell: bash
        env:
          SSH_KEY: ${{secrets.SSH_PRIVATE_KEY}}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var "GITHUB_RUN_ID=$GITHUB_RUN_ID" -var "do_token=${DO_PAT}" -no-color
        continue-on-error: true
        env:
          DO_PAT: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: |
          terraform apply -var "GITHUB_RUN_ID=$GITHUB_RUN_ID" -var "do_token=${DO_PAT}" -auto-approve
        env:
          DO_PAT: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

  reachable:
    name: Reachable
    runs-on: ubuntu-latest
    needs: Deploy

    defaults:
      run:
        shell: bash
        working-directory: ./test

    steps:
      - name: Checkout files
        uses: actions/checkout@v4

      #- name: Get tag name
      #  uses: olegtarasov/get-tag@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Check GITHUB ID
        id: plan
        run: |
          echo "GITHUB_RUN_ID=$GITHUB_RUN_ID"

      - name: Set up Python
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip3 install ansible pytest-testinfra
          ansible --version

      - name: Get key
        run: |
          echo "$SSH_KEY" > .key
          chmod 400 .key
        shell: bash
        env:
          SSH_KEY: ${{secrets.SSH_PRIVATE_KEY}}

      - name: Create inventory hosts.ini
        run: |
          touch hosts.ini
          echo "[RKE2_CONTROLLERS]" > hosts.ini
          doctl compute droplet list --no-header --tag-name rke2_ansible_test_on_rockylinux-8-x64_${GITHUB_RUN_ID}_controllers --format "Public IPv4" --output text >> hosts.ini
          echo "[RKE2_WORKERS]" >> hosts.ini
          doctl compute droplet list --no-header --tag-name rke2_ansible_test_on_rockylinux-8-x64_${GITHUB_RUN_ID}_workers --format "Public IPv4" --output text >> hosts.ini
          echo "[all:vars]" >> hosts.ini
          echo "kubernetes_api_server_host=$(echo " " | head -1)" >> hosts.ini
          echo "remote_user=root" >> ansible.cfg
          echo "private_key_file=.key" >> ansible.cfg
        env:
          DO_PAT: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Check hosts.ini and ansible.cfg
        run: |
          cat hosts.ini
          cat ansible.cfg

      - name: Test if reachable
        run: |
          ANSIBLE_HOST_KEY_CHECKING=False ansible all -m ping -i hosts.ini -u root -vv --private-key .key

      #- name: Run playbook
      #  run: |
      #    ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i hosts.ini -u root -vv --private-key .key playbooks/tasks/install.yml

      #- name: Run playbook again for idempotency
      #  run: |
      #    ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i hosts.ini -u root -vv --private-key .key playbooks/tasks/rancher.yml

      #- name: Run Ansible Tests
      #  run: |
      #    ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i hosts.ini -u root --verbose --skip-tags "troubleshooting" --private-key .key testing.yml

      #- name: Run Python Tests
      #  run: |
      #    export DEFAULT_PRIVATE_KEY_FILE=.key
      #    pytest --hosts=rke2_servers --ansible-inventory=hosts.ini --force-ansible --connection=ansible --sudo test/basic_server_tests.py
      #    pytest --hosts=rke2_agents --ansible-inventory=hosts.ini --force-ansible --connection=ansible --sudo test/basic_agent_tests.py

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: Reachable
    if: always()

    defaults:
      run:
        shell: bash
        working-directory: ./test

    steps:
      - name: Checkout files
        uses: actions/checkout@v4

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Delete Stack
        if: ${{ always() }}
        run: |
          terraform destroy -var "GITHUB_RUN_ID=$GITHUB_RUN_ID" -var "do_token=${DO_PAT}" -auto-approve
        env:
          DO_PAT: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
